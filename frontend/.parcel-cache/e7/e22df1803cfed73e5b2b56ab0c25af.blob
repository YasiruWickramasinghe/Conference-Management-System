"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.ManagerReferenceNodeSetterContext = exports.ManagerReferenceNodeContext = void 0;
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _createReactContext = _interopRequireDefault(require("@hypnosphi/create-react-context"));
var ManagerReferenceNodeContext = _createReactContext.default();
exports.ManagerReferenceNodeContext = ManagerReferenceNodeContext;
var ManagerReferenceNodeSetterContext = _createReactContext.default();
exports.ManagerReferenceNodeSetterContext = ManagerReferenceNodeSetterContext;
var Manager1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose2.default(Manager2, _React$Component);
    function Manager2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _defineProperty2.default(_assertThisInitialized2.default(_assertThisInitialized2.default(_this)), "referenceNode", void 0);
        _defineProperty2.default(_assertThisInitialized2.default(_assertThisInitialized2.default(_this)), "setReferenceNode", function(newReferenceNode) {
            if (newReferenceNode && _this.referenceNode !== newReferenceNode) {
                _this.referenceNode = newReferenceNode;
                _this.forceUpdate();
            }
        });
        return _this;
    }
    var _proto = Manager2.prototype;
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.referenceNode = null;
    };
    _proto.render = function render() {
        return React.createElement(ManagerReferenceNodeContext.Provider, {
            value: this.referenceNode
        }, React.createElement(ManagerReferenceNodeSetterContext.Provider, {
            value: this.setReferenceNode
        }, this.props.children));
    };
    return Manager2;
}(React.Component);
exports.default = Manager1;
